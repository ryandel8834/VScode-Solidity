{
    "fileTypes": [
        "sol"
    ],
    "name": "Solidity",
    "patterns": [
        { "include": "#natspec"},
        { "include": "#comment"},
        { "include": "#operator" },
        { "include": "#control" },
        { "include": "#constant"},
        { "include": "#number" },
        { "include": "#string" },
        { "include": "#type" },
        { "include": "#global" },
        { "include": "#declaration" },
        { "include": "#function-call" },
        { "include": "#assembly" },
        { "include": "#punctuation" }
    ],
    "repository": {
        "natspec": {
            "patterns": [
                {
                    "begin": "/\\*\\*",
                    "end": "\\*/",
                    "name": "comment.block.documentation",
                    "patterns": [
                        {
                            "include": "#natspec-tags"
                        }
                    ]
                },
                {
                    "begin": "///",
                    "end": "$",
                    "name": "comment.block.documentation",
                    "patterns": [
                        {
                            "include": "#natspec-tags"
                        }
                    ]
                }
            ]
        },
        "natspec-tags": {
            "patterns": [
                {
                    "include": "#natspec-tag-title"
                },
                {
                    "include": "#natspec-tag-author"
                },
                {
                    "include": "#natspec-tag-notice"
                },
                {
                    "include": "#natspec-tag-dev"
                },
                {
                    "include": "#natspec-tag-param"
                },
                {
                    "include": "#natspec-tag-return"
                }
            ]
        },
        "natspec-tag-title": {
            "match": "(@title)\\b",
            "name": "storage.type.title.natspec"
        },
        "natspec-tag-author": {
            "match": "(@author)\\b",
            "name": "storage.type.author.natspec"
        },
        "natspec-tag-notice": {
            "match": "(@notice)\\b",
            "name": "storage.type.dev.natspec"
        },
        "natspec-tag-dev": {
            "match": "(@dev)\\b",
            "name": "storage.type.dev.natspec"
        },
        "natspec-tag-param": {
            "match": "(@param)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.param.natspec"
                },
                "3": {
                    "name": "variable.other.natspec"
                }
            }
        },
        "natspec-tag-return": {
            "match": "(@return)\\b",
            "name": "storage.type.return.natspec"
        },
        "comment": {
            "patterns": [
                {
                    "include": "#comment-line"
                },
                {
                    "include": "#comment-block"
                }
            ]
        },
        "comment-line": {
            "match": "(?<!tp:)//.*?$",
            "name": "comment.line"
        },
        "comment-block": {
            "begin": "/\\*",
            "end": "\\*/",
            "name": "comment.block"
        },
        "operator": {
            "patterns": [
                {
                    "include": "#operator-logic"
                },
                {
                    "include": "#operator-mapping"
                },
                {
                    "include": "#operator-arithmetic"
                },
                {
                    "include": "#operator-binary"
                },
                {
                    "include": "#operator-assignment"
                }
            ]
        },
        "operator-logic": {
            "match": "(==|<(?!<)|<=|>(?!>)|>=|\\&\\&|\\|\\||\\:(?!=)|\\?)",
            "name": "keyword.operator.logic"
        },
        "operator-mapping": {
            "match": "(=>)",
            "name": "keyword.operator.mapping"
        },
        "operator-arithmetic": {
            "match": "(\\+|\\-|\\/|\\*)",
            "name": "keyword.operator.arithmetic"
        },
        "operator-binary": {
            "match": "(\\^|\\&|\\||<<|>>)",
            "name": "keyword.operator.binary"
        },
        "operator-assignment": {
            "match": "(\\:?=)",
            "name": "keyword.operator.assignment"
        },
        "control": {
            "patterns": [
                {
                    "include": "#control-flow"
                },
                {
                    "include": "#control-using"
                },
                {
                    "include": "#control-import"
                },
                {
                    "include": "#control-pragma"
                },
                {
                    "include": "#control-underscore"
                },
                {
                    "include": "#control-unchecked"
                },
                {
                    "include": "#control-other"
                }
            ]
        },
        "control-flow": {
            "match": "\\b(if|else|for|while|do|break|continue|try|catch|finally|throw|returns?)\\b",
            "name": "keyword.control.flow"
        },
        "control-using": {
            "match": "\\b(using)\\b",
            "name": "keyword.control.using"
        },
        "control-import": {
            "match": "\\b(import)\\b",
            "name": "keyword.control.import"
        },
        "control-unchecked": {
            "match": "\\b(unchecked)\\b",
            "name": "keyword.control.unchecked"
        },
        "control-pragma": {
            "match": "\\b(pragma)(?:\\s+([A-Za-z_]\\w+)\\s+([^\\s]+))?\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.pragma"
                },
                "2": {
                    "name": "entity.name.tag.pragma"
                },
                "3": {
                    "name": "constant.other.pragma"
                }
            }
        },
        "control-underscore": {
            "match": "\\b(_)\\b",
            "name": "constant.other.underscore"
        },
        "control-other": {
            "match": "\\b(new|delete|emit)\\b",
            "name": "keyword.control"
        },
        "constant": {
            "patterns": [
                {
                    "include": "#constant-boolean"
                },
                {
                    "include": "#constant-time"
                },
                {
                    "include": "#constant-currency"
                }
            ]
        },
        "constant-boolean": {
            "match": "\\b(true|false)\\b",
            "name": "constant.language.boolean"
        },
        "constant-time": {
            "match": "\\b(seconds|minutes|hours|days|weeks|years)\\b",
            "name": "constant.language.time"
        },
        "constant-currency": {
            "match": "\\b(ether|wei|finney|szabo)\\b",
            "name": "constant.language.currency"
        },
        "number": {
            "patterns": [
                {
                    "include": "#number-decimal"
                },
                {
                    "include": "#number-hex"
                },
                {
                    "include": "#number-scientific"
                }
            ]
        },
        "number-decimal": {
            "match": "\\b([0-9_]+(\\.[0-9_]+)?)\\b",
            "name": "constant.numeric.decimal"
        },
        "number-hex": {
            "match": "\\b(0[xX][a-fA-F0-9]+)\\b",
            "name": "constant.numeric.hexadecimal"
        },
        "number-scientific": {
            "match": "\\b(?:0\\.(?:0[1-9]|[1-9][0-9_]?)|[1-9][0-9_]*(?:\\.\\d{1,2})?)(?:e[+-]?[0-9_]+)?",
            "name": "constant.numeric.scientific"
        },
        "string": {
            "patterns": [
                {
                    "match": "\\\".*?\\\"",
                    "name": "string.quoted.double"
                },
                {
                    "match": "\\'.*?\\'",
                    "name": "string.quoted.single"
                }
            ]
        },
        "type": {
            "patterns": [
                {
                    "include": "#type-primitive"
                }
            ]
        },
        "type-primitive": {
            "match": "\\b(address|string\\d*|bytes\\d*|int\\d*|uint\\d*|bool|hash\\d*)\\b",
            "name": "support.type.primitive"
        },
        "global": {
            "patterns": [
                {
                    "include": "#global-variables"
                },
                {
                    "include": "#global-functions"
                }
            ]
        },
        "global-variables": {
            "patterns": [
                {
                    "match": "\\b(msg|block|tx|now)\\b",
                    "name": "variable.language.transaction"
                },
                {
                    "match": "\\b(this)\\b",
                    "name": "variable.language.this"
                },
                {
                    "match": "\\b(super)\\b",
                    "name": "variable.language.super"
                }
            ]
        },
        "global-functions": {
            "patterns": [
                {
                    "match": "\\b(require|assert|revert)\\b",
                    "name": "keyword.control.exceptions"
                },
                {
                    "match": "\\b(selfdestruct|suicide)\\b",
                    "name": "keyword.control.contract"
                },
                {
                    "match": "\\b(addmod|mulmod|keccak256|sha256|sha3|ripemd160|ecrecover)\\b",
                    "name": "support.function.math"
                },
                {
                    "match": "\\b(unicode)\\b",
                    "name": "support.function.string"
                },
                {
                    "match": "\\b(blockhash|gasleft)\\b",
                    "name": "variable.language.transaction"
                },
                {
                    "match": "\\b(type)\\b",
                    "name": "variable.language.type"
                }
            ]
        },
        "declaration": {
            "patterns": [
                {
                    "include": "#declaration-contract"
                },
                {
                    "include": "#declaration-interface"
                },
                {
                    "include": "#declaration-library"
                },
                {
                    "include": "#declaration-struct"
                },
                {
                    "include": "#declaration-event"
                },
                {
                    "include": "#declaration-error"
                },
                {
                    "include": "#declaration-enum"
                },
                {
                    "include": "#declaration-function"
                },
                {
                    "include": "#declaration-constructor"
                },
                {
                    "include": "#declaration-modifier"
                },
                {
                    "include": "#declaration-mapping"
                }
            ]
        },
        "declaration-contract": {
            "patterns": [
                {
                    "match": "\\b(contract)\\b\\s+(\\w+)\\b\\s*(?=\\{)",
                    "captures": {
                        "1": {
                            "name": "storage.type.contract"
                        },
                        "2": {
                            "name": "entity.name.type.contract"
                        }
                    }
                },
                {
                    "begin": "\\b(contract)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b\\s+",
                    "end": "(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.contract"
                        },
                        "2": {
                            "name": "entity.name.type.contract"
                        },
                        "3": {
                            "name": "storage.modifier.is"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(\\w+)\\b",
                            "name": "source.solidity"
                        }
                    ]
                }
            ]
        },
        "declaration-interface": {
            "patterns": [ 
                {
                    "match": "\\b(interface)\\b\\s+(\\w+)\\b\\s*(?=\\{)",
                    "captures": {
                        "1": {
                            "name": "storage.type.interface"
                        },
                        "2": {
                            "name": "entity.name.type.interface"
                        }
                    }
                },
                {
                    "begin": "\\b(interface)\\b\\s+(\\w+)\\b\\s+\\b(is)\\b\\s+",
                    "end": "(?=\\{)",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type.interface"
                        },
                        "2": {
                            "name": "entity.name.type.interface"
                        },
                        "3": {
                            "name": "storage.modifier.is"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\b(\\w+)\\b",
                            "name": "source.solidity"
                        }
                    ]
                }
            ]
        },
        "declaration-library": {
            "match": "\\b(library)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.library"
                },
                "3": {
                    "name": "entity.name.type.library"
                }
            }
        },
        "declaration-struct": {
            "match": "\\b(struct)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.struct"
                },
                "3": {
                    "name": "entity.name.type.struct"
                }
            }
        },
        "declaration-event": {
            "match": "\\b(event)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.event"
                },
                "3": {
                    "name": "entity.name.type.event"
                }
            }
        },
        "declaration-error": {
            "match": "\\b(error)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.error"
                },
                "3": {
                    "name": "entity.name.type.error"
                }
            }
        },
        "declaration-constructor": {
            "match": "\\b(constructor)\\b",
            "captures": {
                "1": {
                    "name": "storage.type.constructor"
                }
            }
        },
        "declaration-enum": {
            "match": "\\b(enum)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.enum"
                },
                "3": {
                    "name": "entity.name.type.enum"
                }
            }
        },
        "declaration-function": {
            "patterns": [
                {
                    "match": "\\b(function)\\s+([A-Za-z_]\\w*)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.function"
                        },
                        "2": {
                            "name": "entity.name.function"
                        }
                    }
                },
                {
                    "match": "\\b(private|public|internal|external|constant|immutable|pure|view|payable|nonpayable|inherited|indexed|storage|memory|virtual|calldata|override|abstract)\\b",
                    "name": "storage.type.mofifier"
                }
            ]
        },
        "declaration-modifier": {
            "match": "\\b(modifier)(\\s+([A-Za-z_]\\w*))?\\b",
            "captures": {
                "1": {
                    "name": "storage.type.modifier"
                },
                "3": {
                    "name": "entity.name.function"
                }
            }
        },
        "declaration-mapping": {
            "match": "\\b(mapping)\\b",
            "name": "storage.type.mapping"
        },
        "function-call": {
            "match": "\\b([A-Za-z_]\\w*)\\s*\\(",
            "captures": {
                "1": {
                    "name": "entity.name.function"
                }
            }
        },
        "assembly": {
            "patterns": [
                {
                    "match": "\\b(assembly)\\b",
                    "name": "keyword.control.assembly"
                },
                {
                    "match": "\\b(let)\\b",
                    "name": "storage.type.assembly"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.statement"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.accessor"
                },
                {
                    "match": ",",
                    "name": "punctuation.separator"
                }
            ]
        }
    },
    "scopeName": "source.solidity",
    "uuid": "ad87d2cd-8575-4afe-984e-9421a3788933"
}